Karous
WoD 20th Annversary Edition Sheet system
Revision 0.31

Character should be stored in a CouchDB database.  Each character sheet stored
as a document in that database:

Concept sketch:

{
	"objid": "#12345:1614982300",
	"template": [
		"Base",
		"Mage",
		"Technocracy",
		"Void Engineers"
	],
	"faction": [
		"Mage",
		"Technocracy",
		"Void Engineers",
		"Neutralization Specialist Corps"
	],
	"sheet": {
		"Name": "Rico Hernandez Vasquez",
		"Concept: "USMC Ghostbuster",
		"Nature": "Crusader",
		"Demeanor": "Traditionalist"
		"Dexterity": 3,
		"Stamina": 3,
		"Strength": 2,
		"Appearance": 2,
		"Charisma": 2,
		"Manipulation": 2,
		"Intelligence": 4,
		"Perception": 3,
		"Wits": 3,
		"Alertness": 2,
		"Firearms": 2,
		"Science": 2,
		"Energy Weapons": 2,
		"Subdimensions": 2,
		"Dimensional Science": 2,
		"Arete": 3,
		"Essence": "Pattern",
		"Quintessence": [0, 3],
		"Bashing": 0,
	},
	"approved": "1614982969",
}

Additional data that will be stored in the database are templates.  Templates
are basically the 'default' stats that are shown on a sheet of that type, even
when they're zeroes.  It's literally just a blank slate shown on the sheet,
prompting the player with options in Character Generation and beyond.

Sample templates:

{
	"Template Name": "Base",
	"Basics": {
		"Name": { "id": "Name", "type": "string" },
		"Concept: { "id": "Concept", "type": "string" },
		"Nature": { "id": "Nature", "type": "string" },
		"Demeanor": { "id": "Demeanor", "type": "string" }
	}
	"Attributes": {
		"Physical": {
			"Dexterity": { "id": "Dexterity", "type": "integer" },
			"Stamina": { "id": "Stamina", "type": "integer" },
			"Strength": { "id": "Strength", "type": "integer" },
		},
		"Social": {
			"Appearance": { "id": "Appearance", "type": "integer" },
			"Charisma": { "id": "Charisma", "type": "integer" },
			"Manipulation": { "id": "Manipulation", "type": "integer" },
		},
		"Mental": {
			"Intelligence": { "id": "Intelligence", "type": "integer" },
			"Perception": { "id": "Perception", "type": "integer" },
			"Wits": { "id": "Wits", "type": "integer" },
		},
	},
	"Abilities": {
		"Talent": {
		},
		"Skill": {
		},
		"Knowledge": {
		},
	},
	"Secondary Abilities": {
		"Talent": {
		},
		"Skill": {
		},
		"Knowledge": {
		},
	},
	"Powers": {
	},
	"Advantages": {
		"Merits and Flaws": {
		},
		"Backgrounds": {
		},
	},
	"Pools": {
	},
	"Health": {
		"Bashing": { "id": "Bashing", "type": "integer" },
		"Lethal": { "id": "Lethal", "type": "integer" },
		"Aggravated": { "id": "Aggravated", "type": "integer" },
	}
}

{
	"Template Name": "Mage",
	"Abilities": {
		"Talent": {
			"Alertness": { "id": "Alertness", "type": "integer" },
			"Awareness": { "id": "Awareness", "type": "integer" },
		},
		"Skill": {
			"Firearms": { "id": "Firearms", "type": "integer" },
			"Stealth": { "id": "Stealth", "type": "integer" },
		},
		"Knowledge": {
			"Academics": { "id": "Academics", "type": "integer" },
			"Science": { "id": "Science", "type": "integer" },
		},
	},
	"Secondary Abilities": {
		"Talent": {
			"Cooking": { "id": "Cooking", "type": "integer" },
		},
		"Skill": {
			"Archery": { "id": "Archery", "type": "integer" },
			"Energy Weapons": { "id": "Energy Weapons", "type": "integer" },
		},
		"Knowledge": {
			"Military Science": { "id": "Military Science", "type": "integer" },
		},
	},
	"Powers": {
		"Spheres": {
			"Correspondence": { "id": "Correspondence", "type": "integer" },
			"Entropy": { "id": "Entropy", "type": "integer" },
			"Forces": { "id": "Forces", "type": "integer" },
			"Life": { "id": "Life", "type": "integer" },
			"Matter": { "id": "Matter", "type": "integer" },
			"Mind": { "id": "Mind", "type": "integer" },
			"Prime": { "id": "Prime", "type": "integer" },
			"Spirit": { "id": "Spirit", "type": "integer" },
			"Time": { "id": "Time", "type": "integer" },
		},
	},
	"Advantages": {
		"Merits and Flaws": {
		},
		"Backgrounds": {
			"Resources": { "id": "Resources", "type": "integer" },
			"Sanctum": { "id": "Sanctum", "type": "integer" },
		},
		"Arete": { "id": "Arete", "type": "integer" },
		"Essence": { "id": "Essence", "type": "string" },
	},
	"Pools": {
		"Quintessence": { "id": "Quintessence", "type": "pool" },
	},
}

{
	"Template Name": "Technoracy",
	"Secondary Abilities": {
		"Knowledge": {
			"RD Data": { "id": "RD Data", "type": "integer" },
		},
	},
	"Advantages": {
		"Merits and Flaws": {
		},
		"Backgrounds": {
			"Sanctum": { "type": "delete" },
			"Laboratory": { "id": "Sanctum", "alias": "Sanctum", "type": "integer" },
		},
		"Arete": { "type": "delete" },
		"Enlightenment": { "id": "Arete", "alias": "Arete", "type": "integer" },
	},
	"Pools": {
		"Quintessence": { "type": "delete" },
		"Primal Energy": { "id": "Quintessence", "alias": "Quintessence", "type": "pool" },
	},
}

{
	"Template Name": "Void Engineers",
	"Powers": {
		"Spheres": {
			"Spirit": { "type": "delete" },
			"Dimensional Science": { "id": "Dimensional Science", "type": "integer" },
		},
	},
}


Clearly the intent of this data structure is to do some fancy-pants map-reduce
when we query into it.

Templates are all about interface and structure. They are used to determine
both what options to present to players, and how to present them.

Note that the above sketch just shows each template entry having just a single
string value. It should actually be a dict each, so that it can specify type,
as well as the *display name*, because we want to segregate display name from
internal name, as display names may repeat in different templates.

--

A script, probably written with Javascript (Node) but I'm open to Python, will
be called into by RhostMUSH execscript to implement all sheet interactions:

+sheet
+sheet me
+sheet <name>
	Show my/someone else's character sheet

+sheet/<section>
+sheet/<section> me
+sheet/<section> <name>
	Show my/someone else's character sheet, but just one section

+sheet/show here
+sheet/show name
	Show someone else my sheet/the room I'm in

+sheet/show/<section> here
+sheet/show/<section> name
	Show someone else my sheet/the room I'm in, but just one section

+sheet/prove stat/value=name
+sheet/prove stat/value=here
	Prove to someone that I have a stat of at least that value

+roll
	This is going to have all the usual things. I'll spec it later as needed
	But it should support:
	- Rolling a sum of stats and hard-coded penalties and bonuses to diffs
	- Rolling to the room or to individual players
	- Rolling to a job
	- Emitting all rolls to a staff channel
	- "Test" rolling that doesn't log to a staff channel
	- Support a "with speciality" toggle
